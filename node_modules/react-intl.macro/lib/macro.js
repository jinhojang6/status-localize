"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _babelPluginMacros = require("babel-plugin-macros");

var R = _interopRequireWildcard(require("ramda"));

var _index = require("./utils/index");

/* eslint no-console: 0 */
// import printAST from 'ast-pretty-print';
function reactIntlMacro(_ref) {
  var references = _ref.references,
      state = _ref.state,
      filename = _ref.state.file.opts.filename,
      t = _ref.babel.types,
      _ref$config = _ref.config;
  _ref$config = _ref$config === void 0 ? _index.DEFAULT_CONFIG : _ref$config;
  var verbose = _ref$config.verbose;
  var _references$defineMes = references.defineMessages,
      defineMessages = _references$defineMes === void 0 ? [] : _references$defineMes,
      _references$Formatted = references.FormattedMessage,
      FormattedMessage = _references$Formatted === void 0 ? [] : _references$Formatted,
      _references$Formatted2 = references.FormattedHTMLMessage,
      FormattedHTMLMessage = _references$Formatted2 === void 0 ? [] : _references$Formatted2;
  var MESSAGE_DIR = process.env.MESSAGE_DIR; // Note: add react-intl on the top of file if it have not been imported.

  if (!R.isEmpty(defineMessages)) {
    var calleeName = defineMessages[0].parentPath.get('callee').node.name;
    (0, _index.importReactIntl)(state, t, 'defineMessages', calleeName);
  }

  if (!R.isEmpty(FormattedMessage)) {
    var _calleeName = FormattedMessage[0].parentPath.get('name').node.name;
    (0, _index.importReactIntl)(state, t, 'FormattedMessage', _calleeName);
  }

  if (!R.isEmpty(FormattedHTMLMessage)) {
    var _calleeName2 = FormattedHTMLMessage[0].parentPath.get('name').node.name;
    (0, _index.importReactIntl)(state, t, 'FormattedHTMLMessage', _calleeName2);
  } // Note: Output side-effect


  if (MESSAGE_DIR) {
    var messages = [].concat(R.unnest(defineMessages.map(_index.getMessages)), FormattedMessage.map(_index.getJSXMessage), FormattedHTMLMessage.map(_index.getJSXMessage));

    var sourceRelativedDir = _path.default.relative(process.cwd(), filename);

    var outputFilename = _path.default.join(process.cwd(), MESSAGE_DIR, sourceRelativedDir).replace(/(js|jsx|ts|tsx)$/g, 'json');

    if (verbose) {
      var inputFilename = filename;
      console.log(_path.default.relative(process.cwd(), inputFilename) + " -> " + _path.default.relative(process.cwd(), outputFilename));
    }

    (0, _index.writeFileSync)(outputFilename, messages, state);
  }
}

var _default = (0, _babelPluginMacros.createMacro)(reactIntlMacro, {
  configName: _index.REACT_INTL
});

exports.default = _default;
module.exports = exports.default;