/* eslint no-console: 0 */
import path from 'path';
import { createMacro } from 'babel-plugin-macros';
import * as R from 'ramda';
// import printAST from 'ast-pretty-print';
import { DEFAULT_CONFIG, REACT_INTL, importReactIntl, writeFileSync, getMessages, getJSXMessage } from './utils/index';

function reactIntlMacro(_ref) {
  var references = _ref.references,
      state = _ref.state,
      filename = _ref.state.file.opts.filename,
      t = _ref.babel.types,
      _ref$config = _ref.config;
  _ref$config = _ref$config === void 0 ? DEFAULT_CONFIG : _ref$config;
  var verbose = _ref$config.verbose;
  var _references$defineMes = references.defineMessages,
      defineMessages = _references$defineMes === void 0 ? [] : _references$defineMes,
      _references$Formatted = references.FormattedMessage,
      FormattedMessage = _references$Formatted === void 0 ? [] : _references$Formatted,
      _references$Formatted2 = references.FormattedHTMLMessage,
      FormattedHTMLMessage = _references$Formatted2 === void 0 ? [] : _references$Formatted2;
  var MESSAGE_DIR = process.env.MESSAGE_DIR; // Note: add react-intl on the top of file if it have not been imported.

  if (!R.isEmpty(defineMessages)) {
    var calleeName = defineMessages[0].parentPath.get('callee').node.name;
    importReactIntl(state, t, 'defineMessages', calleeName);
  }

  if (!R.isEmpty(FormattedMessage)) {
    var _calleeName = FormattedMessage[0].parentPath.get('name').node.name;
    importReactIntl(state, t, 'FormattedMessage', _calleeName);
  }

  if (!R.isEmpty(FormattedHTMLMessage)) {
    var _calleeName2 = FormattedHTMLMessage[0].parentPath.get('name').node.name;
    importReactIntl(state, t, 'FormattedHTMLMessage', _calleeName2);
  } // Note: Output side-effect


  if (MESSAGE_DIR) {
    var messages = [].concat(R.unnest(defineMessages.map(getMessages)), FormattedMessage.map(getJSXMessage), FormattedHTMLMessage.map(getJSXMessage));
    var sourceRelativedDir = path.relative(process.cwd(), filename);
    var outputFilename = path.join(process.cwd(), MESSAGE_DIR, sourceRelativedDir).replace(/(js|jsx|ts|tsx)$/g, 'json');

    if (verbose) {
      var inputFilename = filename;
      console.log(path.relative(process.cwd(), inputFilename) + " -> " + path.relative(process.cwd(), outputFilename));
    }

    writeFileSync(outputFilename, messages, state);
  }
}

export default createMacro(reactIntlMacro, {
  configName: REACT_INTL
});