import _extends from "@babel/runtime/helpers/esm/extends";
import * as R from 'ramda';
import printICUMessage from 'babel-plugin-react-intl/lib/print-icu-message'; // import printAST from 'ast-pretty-print';

/**
 * Evaluate JSXExpression
 * ref: https://github.com/yahoo/babel-plugin-react-intl/blob/6d364b01554f80433067202f342d6b516b03daaa/src/index.js#L31-L40
 */

export function evaluatePath(path) {
  var evaluated = path.evaluate();

  if (evaluated.confident) {
    return evaluated.value;
  }

  throw path.buildCodeFrameError('[React Intl] Messages must be statically evaluate-able for extraction.');
}
export function objectExpressionToObject(objectExpression) {
  return objectExpression.get('properties').reduce(function (acc, property) {
    var _extends2;

    var name = property.get('key').node.name;
    var value = property.get('value').node.value; // Note: expression and templateLiteral

    if (property.get('value').isTemplateLiteral() || property.get('value').isBinaryExpression()) {
      value = R.pipe(evaluatePath, R.ifElse(R.is(String), printICUMessage, R.identity))(property.get('value'));
    }

    return _extends({}, acc, (_extends2 = {}, _extends2[name] = value, _extends2));
  }, {});
}
export function jsxAttributesToObject(jsxAttributes) {
  return jsxAttributes.reduce(function (acc, attribute) {
    var _extends3;

    var name = attribute.get('name').node.name;
    var value = attribute.get('value').node.value; // Note: expression and templateLiteral

    if (attribute.get('value').isJSXExpressionContainer()) {
      value = R.pipe(evaluatePath, R.ifElse(R.is(String), printICUMessage, R.identity))(attribute.get('value.expression'));
    }

    return _extends({}, acc, (_extends3 = {}, _extends3[name] = value, _extends3));
  }, {});
}